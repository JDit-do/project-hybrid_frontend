name: FE → ECR (simple)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      bump_minor:
        description: "Minor를 올릴까요? true면 minor+1, 아니면 patch+1"
        required: false
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ECR_REPO: frontend-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Decide version (vMAJOR.MINOR.PATCH)
        id: ver
        shell: bash
        env:
          ECR_REPO: ${{ env.ECR_REPO }}
          AWS_REGION: ${{ env.AWS_REGION }}
          INPUT_BUMP_MINOR: ${{ github.event.inputs.bump_minor }}
        run: |
          set -euo pipefail
          MAJOR="1"
          EXISTING=$(aws ecr describe-images --repository-name "$ECR_REPO" \
            --query "imageDetails[].imageTags[]" --output text 2>/dev/null \
            | tr '\t' '\n' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' || true)

          if [ -n "$EXISTING" ]; then
            CUR_MINOR_MAX=$(printf '%s\n' $EXISTING | awk -F'[v\\.]' -v maj="$MAJOR" '$2==maj{print $3}' | sort -n | tail -n1)
            CUR_MINOR_MAX="${CUR_MINOR_MAX:-0}"
          else
            CUR_MINOR_MAX="0"
          fi

          if [ "$(echo "${INPUT_BUMP_MINOR:-}" | tr '[:upper:]' '[:lower:]')" = "true" ]; then
            MINOR=$((CUR_MINOR_MAX+1)); PATCH=0
          else
            MINOR="$CUR_MINOR_MAX"
            if [ -n "$EXISTING" ]; then
              PATCH_MAX=$(printf '%s\n' $EXISTING | awk -F'[v\\.]' -v maj="$MAJOR" -v min="$MINOR" '$2==maj && $3==min{print $4}' | sort -n | tail -n1)
              PATCH=$([ -z "${PATCH_MAX:-}" ] && echo 0 || echo $((PATCH_MAX+1)))
            else
              PATCH=0
            fi
          fi
          echo "version=v${MAJOR}.${MINOR}.${PATCH}" >> "$GITHUB_OUTPUT"
          echo "sha=${GITHUB_SHA}" >> "$GITHUB_OUTPUT"

      # Dockerfile로 빌드 → ECR 푸시
      - name: Build & Push (default arch)
        uses: docker/build-push-action@v5
        env:
          REGISTRY: ${{ steps.ecr.outputs.registry }}
        with:
          context: .
          push: true
          tags: |
            ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ steps.ver.outputs.version }}
            ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:latest
            ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ steps.ver.outputs.sha }}

      - name: Show pushed tags
        run: |
          echo "Pushed:"
          echo "  ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ steps.ver.outputs.version }}"
          echo "  ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:latest"
          echo "  ${{ steps.ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ steps.ver.outputs.sha }}"
